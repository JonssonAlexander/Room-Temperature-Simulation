import numpy as np
def calculate_air_currents(room, fan_locations, fan_strength, max_distance=3):
    """
    Calculate the air currents generated by the fans.

    :param room: The numpy array representing room temperature.
    :param fan_locations: A list of tuples representing fan locations.
    :param fan_strength: The strength of the air current generated by each fan.
    :param max_distance: The maximum distance from the fan at which the air current is effective.
    :return: A numpy array representing the air current vector field.
    """
    air_currents = np.zeros(room.shape + (2,))  # Vector field for air currents (x and y components)
    for fan_location in fan_locations:
        fan_x, fan_y = fan_location
        for i in range(max(0, fan_x - max_distance), min(room.shape[0], fan_x + max_distance + 1)):
            for j in range(max(0, fan_y - max_distance), min(room.shape[1], fan_y + max_distance + 1)):
                distance_from_fan = np.sqrt((fan_x - i)**2 + (fan_y - j)**2)
                if distance_from_fan <= max_distance:
                    direction = np.array([i - fan_x, j - fan_y]) / (distance_from_fan + 1e-5)  # Normalize direction
                    strength = fan_strength * (1 - distance_from_fan / max_distance)
                    air_currents[i, j] += direction * strength
    return air_currents

def diffuse_heat_with_air_currents(room, air_currents, D):
    """
    Diffuse heat with consideration of air currents.

    :param room: The numpy array representing room temperature.
    :param air_currents: The air current vector field.
    :param D: The diffusion coefficient.
    :return: The updated room temperature.
    """
    new_room = room.copy()
    for i in range(1, room.shape[0] - 1):
        for j in range(1, room.shape[1] - 1):
            # Standard diffusion
            temp_diffusion = D * (room[i+1, j] + room[i-1, j] + room[i, j+1] + room[i, j-1] - 4 * room[i, j])
            # Adding the effect of air currents
            air_flow_effect = np.dot(air_currents[i, j], np.array([room[i+1, j] - room[i-1, j], room[i, j+1] - room[i, j-1]]))
            new_room[i, j] += temp_diffusion + air_flow_effect
    return new_room

def diffuse_heat(room, D=0.1):
    """
    Apply heat diffusion based on the simplified diffusion equation.

    :param room: The numpy array representing room temperature.
    :param D: The diffusion coefficient.
    :return: The updated room temperature.
    """
    new_room = room.copy()
    for i in range(1, room.shape[0] - 1):
        for j in range(1, room.shape[1] - 1):
            # Calculating the second spatial derivatives using finite differences
            d2T_dx2 = room[i+1, j] - 2 * room[i, j] + room[i-1, j]
            d2T_dy2 = room[i, j+1] - 2 * room[i, j] + room[i, j-1]

            # Update the temperature based on the diffusion equation
            new_room[i, j] += D * (d2T_dx2 + d2T_dy2)
    return new_room